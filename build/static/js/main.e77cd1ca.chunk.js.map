{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","id","Navbar","bg","variant","sticky","Container","Brand","href","Nav","className","Link","ButtonToolbar","Button","Dropdown","Toggle","class","Menu","Item","Jumbotron","fluid","color","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gVA2DeA,E,iLA9CX,OAAQ,yBAAKC,GAAG,UAEd,kBAACC,EAAA,EAAD,CAAQC,GAAG,UAAUC,QAAQ,OAAOC,OAAO,OACzC,kBAACC,EAAA,EAAD,KACE,kBAACJ,EAAA,EAAOK,MAAR,CAAcC,KAAK,SAAnB,aACA,kBAACC,EAAA,EAAD,CAAKC,UAAU,WACb,kBAACD,EAAA,EAAIE,KAAL,CAAUH,KAAK,WAAf,UACA,kBAACC,EAAA,EAAIE,KAAL,CAAUH,KAAK,aAAf,YACA,kBAACC,EAAA,EAAIE,KAAL,CAAUH,KAAK,SAAf,SAEF,kBAACI,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQT,QAAQ,UAAUM,UAAU,IAApC,WAEA,kBAACG,EAAA,EAAD,CAAQT,QAAQ,UAAUM,UAAU,IAApC,WAEA,kBAACI,EAAA,EAAD,CAAUJ,UAAU,WAElB,kBAACI,EAAA,EAASC,OAAV,KACE,kBAACF,EAAA,EAAD,CAAQT,QAAQ,WACd,uBAAGY,MAAM,yBAIb,kBAACF,EAAA,EAASG,KAAV,KACE,kBAACH,EAAA,EAASI,KAAV,CAAeV,KAAK,cAApB,WACA,kBAACM,EAAA,EAASI,KAAV,CAAeV,KAAK,cAApB,mBACA,kBAACM,EAAA,EAASI,KAAV,CAAeV,KAAK,cAApB,iBAQV,kBAACW,EAAA,EAAD,CAAWC,MAAM,SACf,wBAAIV,UAAU,yBAAyBW,MAAM,SAA7C,aACA,uBAAGX,UAAU,8BAAb,83C,GAtCUY,aCCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e77cd1ca.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport Button from 'react-bootstrap/Button';\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Container from 'react-bootstrap/Container';\nimport Dropdown from 'react-bootstrap/Dropdown';\n\n\nclass App extends Component {\n  render() {\n    return (<div id=\"parent\">\n\n      <Navbar bg=\"primary\" variant=\"dark\" sticky=\"top\">\n        <Container>\n          <Navbar.Brand href=\"#home\">180Crypto</Navbar.Brand>\n          <Nav className=\"mr-auto\">\n            <Nav.Link href=\"#Prices\">Prices</Nav.Link>\n            <Nav.Link href=\"#Products\">Products</Nav.Link>\n            <Nav.Link href=\"#News\">News</Nav.Link>\n          </Nav>\n          <ButtonToolbar>\n            <Button variant=\"primary\" className=\"\">Sign In</Button>\n\n            <Button variant=\"primary\" className=\"\">Sign Up</Button>\n\n            <Dropdown className=\"mr-auto\">\n\n              <Dropdown.Toggle>\n                <Button variant=\"primary\">\n                  <i class=\"far fa-user-circle\"></i>\n                </Button>\n              </Dropdown.Toggle>\n\n              <Dropdown.Menu>\n                <Dropdown.Item href=\"#/action-1\">Profile</Dropdown.Item>\n                <Dropdown.Item href=\"#/action-2\">Change Password</Dropdown.Item>\n                <Dropdown.Item href=\"#/action-3\">Sign Out</Dropdown.Item>\n              </Dropdown.Menu>\n            </Dropdown>\n\n          </ButtonToolbar>\n        </Container>\n      </Navbar>\n\n      <Jumbotron fluid=\"fluid\">\n        <h1 className=\"text-light text-center\" color=\"light\">180Crypto</h1>\n        <p className=\"text-light text-center p-4\">Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. In tellus integer feugiat scelerisque varius morbi enim nunc. Venenatis cras sed felis eget velit aliquet sagittis id consectetur. Eu lobortis elementum nibh tellus molestie. Cursus in hac habitasse platea dictumst quisque sagittis. Sit amet mauris commodo quis imperdiet massa. Sit amet consectetur adipiscing elit ut aliquam. Nunc congue nisi vitae suscipit tellus. Sagittis eu volutpat odio facilisis mauris. Convallis a cras semper auctor neque vitae tempus. Netus et malesuada fames ac turpis egestas. Eget est lorem ipsum dolor sit amet consectetur. Aliquet nibh praesent tristique magna sit amet. Est ultricies integer quis auctor elit sed vulputate mi. Commodo ullamcorper a lacus vestibulum sed arcu non odio euismod. Eget magna fermentum iaculis eu non. Diam phasellus vestibulum lorem sed risus ultricies. Mauris vitae ultricies leo integer malesuada nunc vel risus. Id faucibus nisl tincidunt eget nullam non nisi. Nulla malesuada pellentesque elit eget gravida cum. Donec ac odio tempor orci. Aliquam ultrices sagittis orci a scelerisque purus semper eget duis. Aliquam ultrices sagittis orci a scelerisque purus. Pretium aenean pharetra magna ac placerat vestibulum. Egestas erat imperdiet sed euismod nisi porta lorem mollis. Elit ut aliquam purus sit amet.\n\n        </p>\n\n      </Jumbotron>\n\n    </div>);\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}